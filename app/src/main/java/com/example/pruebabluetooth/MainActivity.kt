package com.example.pruebabluetoothimport android.annotation.SuppressLintimport android.bluetooth.BluetoothAdapterimport android.content.Contextimport android.content.Intentimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.AdapterViewimport android.widget.BaseAdapterimport android.widget.TextViewimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport kotlinx.android.synthetic.main.activity_main.*private val names= arrayListOf<String>()private val registrop = arrayListOf<String>()class MainActivity : AppCompatActivity() {    private val RESQUEST_CODE_ENEABLE_BT:Int = 1    private lateinit var bAdapter:BluetoothAdapter    companion object {                                        //para que sea estatica        const val EXTRA_ADDRESS: String = "Device Adress"    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        list.adapter = MyCustomAdapter(this)//funciÃ³n principal        bAdapter = BluetoothAdapter.getDefaultAdapter()        blue()    }    private fun blue(){        if (bAdapter.isEnabled){            Toast.makeText(this, "BTH encendido", Toast.LENGTH_SHORT).show()            coneBtn.visibility=View.VISIBLE        }else{            coneBtn.visibility=View.GONE            Toast.makeText(this, "BTH Apagado", Toast.LENGTH_SHORT).show()        }        // encender bluetoth        turnOnBtn.setOnClickListener {            if (bAdapter.isEnabled) {                Toast.makeText(this, "Bluetooth listo", Toast.LENGTH_LONG).show()     //Si esta encendido que muestre un mensaje            } else {                Toast.makeText(this, "Encendiendo Bluetooth", Toast.LENGTH_LONG).show()                val intent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)                   //Sino que lo encienda                startActivityForResult(intent, RESQUEST_CODE_ENEABLE_BT)                coneBtn.visibility=View.VISIBLE            }        }        coneBtn.setOnClickListener {            if (bAdapter.isEnabled) {                val devices = bAdapter.bondedDevices                for (device in devices) {                    val deviceName = device.name                    val deviceAdress = device                    names.add(deviceName.toString())                    registrop.add(deviceAdress.toString())                    list.adapter =  MyCustomAdapter(this)                }                // cambiar de color los mensajes de encendido y apagado                //editTex_indicator.setBackgroundColor(Color.parseColor("#E3F2FD"))                //editTex_indicator2.setBackgroundColor(Color.parseColor("#FF3D00"))            }else{                Toast.makeText(this, "Por favor encienda en BTH", Toast.LENGTH_SHORT).show()            }            list.onItemClickListener = AdapterView.OnItemClickListener { _, _, position, _ ->                Toast.makeText(this, "Posicion: " + position, Toast.LENGTH_SHORT).show()                val address: String = registrop[position]                val intent = Intent(this, Panel::class.java)                intent.putExtra(EXTRA_ADDRESS, address)                startActivity(intent)            }        }//fin del coneBtn    }    private class MyCustomAdapter(context: Context) : BaseAdapter() {        private val mContext: Context = context        //Recuentos        override fun getCount(): Int {            return names.size        }        override fun getItemId(position: Int): Long {            return position.toLong()        }        override fun getItem(position: Int): Any {            return "TEXT STRING"        }        //responsable del renderizado de cada fila        @SuppressLint("ViewHolder")        override fun getView(position: Int, convertView: View?, ViewGroup: ViewGroup?): View {            val layoutInflater = LayoutInflater.from(mContext)            val rowMain = layoutInflater.inflate(R.layout.row_main, ViewGroup, false)            val nameTextView = rowMain.findViewById<TextView>(R.id.name_listextView)            nameTextView.text = names[position]            val positionTextView = rowMain.findViewById<TextView>(R.id.position_textview)            positionTextView.text = registrop[position]            return rowMain        }    }// fin de la class MyCustomAdapter}// fin del activity